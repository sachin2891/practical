#include <bits/stdc++.h>
using namespace std;
 
int fib(int n)
{
    if (n <= 1)
        return n;
    return fib(n - 1) + fib(n - 2);
}
 
int main()
{
    int n = 9;
    cout << fib(n);
    getchar();
    return 0;
}


//iterative solution 

// Fibonacci Series using Space Optimized Method
#include<bits/stdc++.h>
using namespace std;

int fib(int n)
{
	int a = 0, b = 1, c, i;
	if( n == 0)
		return a;
	for(i = 2; i <= n; i++)
	{
	c = a + b;
	a = b;
	b = c;
	}
	return b;
}

// Driver code
int main()
{
	int n = 9;
	
	cout << fib(n);
	return 0;
}

// This code is contributed by Code_Mech


//python

# Function for nth Fibonacci number
def Fibonacci(n):

	# Check if input is 0 then it will
	# print incorrect input
	if n < 0:
		print("Incorrect input")

	# Check if n is 0
	# then it will return 0
	elif n == 0:
		return 0

	# Check if n is 1,2
	# it will return 1
	elif n == 1 or n == 2:
		return 1

	else:
		return Fibonacci(n-1) + Fibonacci(n-2)

# Driver Program
print(Fibonacci(9))

# This code is contributed by Saket Modi
# then corrected and improved by Himanshu Kanojiya





//e^x
//iterative 

def exponential(n, x):
 
    # initialize sum of series
    sum = 1.0
    for i in range(n, 0, -1):
        sum = 1 + x * sum / i
    print ("e^x =", sum)
 
# Driver program to test above function
n = 10
x = 1.0
exponential(n, x)



//recursive 


# Python implementation of the approach

# Recursive Function
# global variables p and f
p = 1.0
f = 1.0


def e(x, n):

	global p, f

	# Termination condition
	if (n == 0):
		return 1

	# Recursive call
	r = e(x, n - 1)

	# Update the power of x
	p = p * x

	# Factorial
	f = f * n

	return (r + p / f)

# Driver code


x = 4
n = 15
print(e(x, n))

# This contributed by ihritik


e^x c+++;
//interative


#include <bits/stdc++.h>

using namespace std;

int factorial(int n ){
    if( n==0 || n==1)
        return 1;
    else 
        return n*factorial(n-1);
}

int main()
{
    int x , n ;
    cout <<"Enter value of x : ";
    cin >> x ;
    cout <<"Enter number of terms : ";
    cin >> n ;
    
    double sum = 1.0 , power , fact;
    for (int a = 1; a < n; a++) {
        power = pow(x,a);
        sum += (power / factorial(a));
    }
    cout << "Sum : " << sum;
    return 0;
}


//c+++ recursive

// C++ implementation of the approach
#include <iostream>
using namespace std;

// Recursive Function with static
// variables p and f
double e(int x, int n)
{
	static double p = 1, f = 1;
	double r;

	// Termination condition
	if (n == 0)
		return 1;

	// Recursive call
	r = e(x, n - 1);

	// Update the power of x
	p = p * x;

	// Factorial
	f = f * n;

	return (r + p / f);
}

// Driver code
int main()
{
	int x = 4, n = 15;
	cout<<"\n"<< e(x, n);

	return 0;
}

// this code is contributed by shivanisinghss2110

//java e^x :

//recursive

// Java implementation of the approach
import java.text.*;

class GFG {

	// Recursive Function with static
	// variables p and f
	static double p = 1, f = 1;
	static double e(int x, int n)
	{
		double r;

		// Termination condition
		if (n == 0)
			return 1;

		// Recursive call
		r = e(x, n - 1);

		// Update the power of x
		p = p * x;

		// Factorial
		f = f * n;

		return (r + p / f);
	}

	// Driver code
	public static void main(String[] args)
	{
		int x = 4, n = 15;
		DecimalFormat df = new DecimalFormat("0.######");
		System.out.println(df.format(e(x, n)));
	}
}

// This code is contributed by mits




